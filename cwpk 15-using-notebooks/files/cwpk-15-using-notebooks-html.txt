<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta name="generator" content=
  "HTML Tidy for HTML5 (experimental) for Windows https://github.com/w3c/tidy-html5/tree/c63cc39" />
  <meta content="text/html; charset=UTF-8" http-equiv="content-type" />

  <title>CWPK - Using Notebooks for CWPK</title>
  <link rel="stylesheet" href="http://www.mkbergman.com/wp-content/themes/ai3v2/style.css" type="text/css" />
  <link rel="stylesheet" href="http://www.mkbergman.com/wp-content/themes/ai3v2/style-ai3.css" type="text/css" />
  <link rel="stylesheet" href="files/custom.css" type="text/css" />
</head>

<body>
  +++

  <h1>CWPK #15: Using Notebooks for CWPK Documentation</h1>

  <h2>Recipes for Jupyter Notebooks Going Forward<br /></h2>

  <div style="float: left; width: 305px; margin-right: 10px;"><img src=
  "http://kbpedia.org/cwpk-files/cooking-with-kbpedia-305.png" title="Cooking with KBpedia" style="" width=
  "305" /></div>

  <p>In the last installment of the <a style="font-style: italic;" href="/cooking-with-python-and-kbpedia/">Cooking
  with Python and KBpedia</a> series, we began to learn about weaving code and narrative in a <a href=
  "https://en.wikipedia.org/wiki/Project_Jupyter">Jupyter Notebook</a> page. We also saw that we can generate
  narratives to accompany our code with the Markdown mark-up language, though it is not designed (in my view) for
  efficient document creation. Short explanations between code snippets are fine in Jupyter Notebook, but longer
  narratives or ones where formatting or decorating are required are fairly difficult. Further, we also want to publish
  Web pages independent of our environment. What I describe in this CWPK installment is how I combine standard Web page
  editing and publishing with Jupyter, as well as the starting parts to my standard workflow.</p>

  <p>Having a repeatable and fairly efficient workflow for formulating a lesson or question, then scoping it out framed
  with introduction and working parts, and then skeletonizing it such that good working templates can be put in place
  is important when one contemplates progressing through all of the stages of discovering, addressing, and documenting
  a project. In the case of this CWPK series, this is not a trifling consideration. I am anticipating literally dozens
  of installments in this series; heck, we are already at installment #15 and we haven't begun yet to code anything in
  <a href="https://en.wikipedia.org/wiki/Python_%28programming_language%29">Python</a>! We could stitch together more
  direct methods of doing a given task, but that will not necessarily arm us to do a broader set of tasks.</p>

  <p>Not everyone prefers my style of trying to get systems and game plan in place before tackling a big task, in which
  case I suggest you skip to the end where we conclude with a discussion of directory organization. For this initial
  part, however, I will assume that you want to sometimes rely on an interacting coding environment and other times
  want to generate narratives efficiently. In this use case, the ability to '<a href=
  "https://en.wikipedia.org/wiki/Round-trip_format_conversion">round-trip</a>' between HTML editing and Jupyter is an
  important consideration. Efficiency and document size are relevant considerations, too.</p>

  <p>Recall in our last installment that we pointed to two ways to get HTML pages from a Jupyter Notebook: 1) either
  from a download, or 2) from invoking the <code>nbconvert</code> service from a command window. We could not invoke
  <code>nbconvert</code> from within a notebook page because it is a Jupyter service. This next frame shows the file
  created from the article herein using the download method:</p>

  <div class="center-image">
    <iframe src="files/cwpk-15-using-notebooks-download.txt" allowfullscreen="" style=
    "border: 1px solid rgb(238, 238, 238);" height="450" width="800">Info here.</iframe>
  </div>

  <p>I should mention that both the <code>nbconvert</code> and download methods produce similarly bloated files. Go
  ahead, scroll through it. While the generated file renders very well, it is about <span style=
  "font-weight: bold; font-style: italic;">20x larger</span> than the original HTML file that captures its narrative.
  This bloat in file size is due to the fact that all of the style information (<code>*.css</code>) contained in the
  original document gets re-expressed in this version, along with much other styling information not directly related
  to this page. Thus, while the generation of the page is super easy, and renders beautifully, it is an overweight pig.
  We could spend some time whittling down this monster to size with some of the built-in functionality of
  <code>nbconvert</code>, but why not deal that problem using <a href="https://en.wikipedia.org/wiki/Pandoc">Pandoc</a>
  directly upon which <code>nbconvert</code> is based?<br /></p>

  <p>So, in testing the cycle from HTML to notebooks and back again, we find that certain aspects of generating project
  documentation present challenges. In working through the documentation for this series I have found these types of
  problem areas for round-tripping:</p>

  <ul>
    <li>Use of a standard, formatted header (with logo)</li>

    <li>Use of standard footers (notification boxes in our case)</li>

    <li>Centering images</li>

    <li>Centering text</li>

    <li>Tables, and</li>

    <li>Loss of the interactive functionality in the notebook in the HTML.</li>
  </ul>

  <p>Only the last consideration is essential to create useful project and code documentation. However, if one likes
  professional, well-formatted pages with loads of images and other pretty aspects, it is worth some time to work out
  productive ways to handle these aspects. In broad terms, for me, that means to be able to move between Web page
  authoring and interactive code development, testing, and documentation. I also decided to devote some time to these
  questions as a way to better understand the flexibilities and power of the tools we have chosen. We will always
  encounter gaps in knowledge when working new problems. I'd like to find the practical balance between the
  <span style="font-style: italic;">de minimus</span> path to get something done with learning enough to be able to
  travel similar paths in the future, perhaps even in a production mode.</p>

  <p>Since Markdown is a superset of HTML it is not possible to round-trip using Markdown alone within Jupyter
  Notebook. Fortunately, many Markdown interpreters, including Jupyter, accept some limited HTML in documents. There
  are two ways that may happen. The first is to use one of the so-called <a href=
  "https://ipython.readthedocs.io/en/stable/interactive/magics.html">'magic' terms</a> in <a href=
  "https://en.wikipedia.org/wiki/IPython">iPython</a>, the command shell underneath Jupyter Notebook. By placing the
  magic term <code class="sig-name descname">%%html</code> at the start of a notebook Markdown cell, we instruct the
  system to render that entire cell as HTML. Since it is easy to stop a cell and add a new one below it, we can 'fence'
  such aspects easily in our notebook code bases. I encourage you to study other 'magic' terms from the <a href=
  "https://ipython.readthedocs.io/en/stable/interactive/magics.html">prior link</a> that are shortcuts to some desired
  notebook capabilities.</p>

  <p>A second way to use HTML in notebooks is to embed HTML tags. This way is trickier since the various Markdown
  evaluation engines -- due to Markdown's diversity of implementations -- may recognize different tags or, when
  recognized, treat them differently. One of the reasons to embrace Pandoc, introduced in the last installment, is to
  accept its standard way of handling languages, markups, formats, and functions.</p>

  <p>Boiled down to its essence, then, we have two functional challenges in round-tripping:</p>

  <ol>
    <li>Loss of HTML tags and styling with Markdown</li>

    <li>Loss of notebook functionality in HTML.</li>
  </ol>

  <p>One of Pandoc's attractions is that both <code>&lt;div&gt;</code> and <code>&lt;span&gt;</code> can be flagged to
  be skipped in the conversions, which means we can isolate our HTML changes to these tag types, with <code>divs</code>
  giving us block 'fencing' capabilities and <code>spans</code> inline 'fencing' capabilities. (There are also <a href=
  "https://en.wikipedia.org/wiki/Lua_%28programming_language%29">Lua</a> filter capabilities with Pandoc to provide
  essentially unlimited control over conversions, but we will leave that complexity outside of our scope.) Another
  observation we make is that many of the difficult tags that do not round-trip well; many of these deal with styling
  or HTML tags that can be captured via <a href="https://en.wikipedia.org/wiki/Cascading_Style_Sheets">CSS</a>
  styling.</p>

  <p>Another challenge that must be deciphered are the many flavors of Markdown that appear in the wild. Pandoc handles
  many flavors of Markdown, including the specified readers of <code>markdown</code>, <code>markdown_strict</code>,
  <code>markdown_mmd</code>, <code>markdown_phpextra</code>, and <code>gfm</code> (GitHub-flavored Markdown). One can
  actually ingest any of these flavors in Pandoc and express any of the others. As I noted in the last installment,
  Pandoc presently has 33 different format readers from Word docs to rich text and can write out nearly twice that many
  in different formats. For our purposes, however, it is best to choose Pandoc's canonical internal form of
  <code>markdown</code>. However, besides translation purposes, the <code>gfm</code> option likely has the broadest
  external applicability.</p>

  <p>OK, so it appears that Pandoc's own flavor of Markdown is the best conversion target and that we will try to move
  problem transfer areas to <code>div</code> and <code>span</code>. As for the loss of notebook functionality in HTML,
  there is no direct answer. However, because an interactive notebook page is organized in a sequence of cells, we can
  segregate activity areas from interactive areas in our documents. That does not give us complete document
  convertibility, but we can do it in sections if need be after initial drafting. With this basic approach decided, we
  begin to work through the issues.</p>

  <p>After testing inline styling, we see that we can find recipes that move the CSS and related HTML (such as
  <code>&lt;center&gt;</code> or <code>&lt;i&gt;</code> or <code>&lt;italics&gt;</code>) between our HTML and notebook
  environments without loss. Once we go beyond proofs of concept, however, we want to be able to capture our CSS
  information in styling class and ID designations so that we not need to duplicate lengthy styling code. However,
  handling and referencing CSS <a href=
  "https://en.wikipedia.org/wiki/Style_sheet_%28web_development%29">stylesheets</a> is not straightforward with the
  complexity of applications and configuration files of an <a href=
  "https://en.wikipedia.org/wiki/Anaconda_%28Python_distribution%29">Anaconda</a> Python distribution and environment.
  For a very useful discussion of CSS in this context see <a href=
  "https://jacknorthrup.com/jupyter-notebooks/customizing-jupyter-notebooks-appearance-css.html">Jack Northrup's
  notebook on customizing CSS</a></p>

  <p>Now, the tools at both ends of this process, Jupyter Notebook and Pandoc, both recognize users will want their own
  <code>custom.css</code> files to guide these matters. But, of course, each tool has a different location and
  mechanism for specifying this. There is surprisingly little documentation or guidance on the Web for how to handle
  these things. Most of the references I encountered on these matters were incorrect. We have two fundamental
  challenges in this quest: 1) how do we define and where do we locate our <code>custom.css</code> file on disk?; and
  2) what are our command-line instructions to best guide the two round-trip conversion steps? We will use Pandoc and
  proper stylesheet locations to guide both questions.</p>

  <p>Let's take the first trip of moving from HTML draft into an operating shell for Jupyter Notebook. First, as we
  draft material with an HTML editor, we are going to want to store our <code>custom.css</code> information that we
  need to segregate into some pre-defined, understood location. One way to do that is through a relative location in
  relation to where our authored HTML document resides. An easy choice is to create a sub-directory of files that is
  placed immediately below where our HTML document resides. If we follow this location, we may always find the
  stylesheet (CSS) in the relative location of '<code>files/custom.css</code>'. (You may name the subdirectory
  something different, but it is probably best to retain the name of '<code>custom.css</code>' since that is expected
  by Jupyter.) However, those same CSS specifications need to be available to Jupyter Notebook, which follows different
  file look-up conventions. One way to discover where Jupyter Notebook expects to find its supplementary CSS files is
  to open the relevant notebook page and save it as HTML (download or <code>nbconvert</code> or Pandoc methods). When
  you open the HTML file with an editor, look for the reference to '<code>custom.css</code>'. That will give you the
  file location in relation to your document's root. In my case, this location is
  <code>C:\1-PythonProjects\Python\Lib\site-packages\notebook\static\custom</code>. For your own circumstance, it may
  also be under the <code>\user\user\</code> profile area depending on whether you first installed Anaconda for an
  individual user. At any rate, look for the <code>\Lib\</code> directory and then follow the directory cascade under
  your main Python location.</p>

  <p>Once you have your desired CSS both where Pandoc will look for it (again, relative is best) and where Jupyter
  Notebook will separately look for it, we can concentrate on getting our additional styles into <a href=
  "files/custom.css"><code>custom.css</code></a>, which you may click on to see its contents for this current page.
  Once we have populated <code>custom.css</code>, it is now time to figure out the conversion parameters. There is much
  flexibility in Pandoc for all aspects of instructing the application at the command line. I present one hard-earned
  configuration below, but for your own purposes, I strongly recommend you inspect the PDF version of the <a href=
  "https://pandoc.org/MANUAL.pdf">Pandoc User Guide</a> should you want to pursue your own modifications. At any rate,
  here is the basic HTML → Notebook initial conversion, using this current page as the example:</p>
  <pre>
<code>$ pandoc -f html -t ipynb+native_divs cwpk-15-using-notebooks.html -o cwpk-15-using-notebooks.ipynb</code>
</pre>

  <p>Here is what these command-line options and switches mean:</p>

  <ul>
    <li><code>-f html</code> - <code>-f</code> (also <code>--from</code>) is the source or from switch, with
    <code>html</code> indicating the source format type. Multiple types are possible, but only one may be specified at
    a time</li>

    <li><code>-t ipynb</code> - <code>-t</code> (also <code>--to</code>) is the target of the conversion, with
    <code>ipynb</code> in this case indicating a notebook document. Multiple types are possible, but only one may be
    specificed here</li>

    <li><code>+native_divs</code> - this is a conversion switch that tells Pandoc to retain the content within a native
    HTML div in the source<br /></li>

    <li><code>cwpk-15-using-notebooks.html</code> - this is the source file specification. There are defaults within
    Pandoc that allow <code>-f html</code> to not be specified, for example and for other formats, once this input file
    type is specified</li>

    <li><code>-o cwpk-15-using-notebooks.ipynb</code> - this is the output (<code>-o</code>) file name; if left
    unspecified, the default is to write the original file name with the new <code>.ipynb</code> extension (or whatever
    target format was specified).</li>
  </ul>

  <p>These commands and switches require the Windows command window or PowerShell to be opened in the same directory as
  the <code>*.html</code> document you are converting when you instruct at the command line. Upon entering this
  command, the appearance of the prompt tells you the conversion proceeded to completion.</p><p>This command will now
  establish a new notebook file (<code>*.ipynb</code>) in the same directory. Please make sure this directory location
  is under the root you established when you installed Jupyter Notebook (see CWPK #10 if you need to refresh that or
  change locations).</p>


  <p>When you invoke Jupyter Notebook and call up the new <code>*.ipynb</code> file, it will open as a single Markdown
  cell. If you need to split that input into multiple parts in order to interweave interactive parts, double-click to
  edit, cut the sections you need to move, Run the cell, add a cell below, and paste the split section into the new
  cell. In this way, you can skeletonize your active portions with existing narrative.</p>

  <p>Upon completing your activities and additions and code tests within Notebook, you may now save out your results to
  HTML for publishing elsewhere. Again, you could Download or use <code>nbconvert</code>, but to keep our file sizes
  manageable and to give ourselves the requisite control we will again do this conversion with Pandoc. After saving
  your work and exiting to the command window, and while still in the current working directory where the
  <code>*.ipynb</code> resides, go ahead and issue this command at the command window prompt:</p>
  <pre>
<code>$ pandoc -s -f ipynb -t html -c files/custom.css --highlight-style=kate cwpk-15-using-notebooks.ipynb -o cwpk-15-using-notebooks-test.html</code>
</pre>

  <p>Here is what the new command-line options and switches mean:</p>

  <p>We have now reversed the <code>-f</code> and <code>-t</code> switches since we are now exporting as HTML; again,
  multiple format options may be substituted here (though specific options may change depending on format)</p>

  <ul>
    <li><code>-s</code> means to process the export as standalone, which will bring in the HTML information outside of
    the <code>&lt;body&gt;</code> tags</li>

    <li><code>-c</code> (or <code>--css=</code>) tells the writer where to find the supplementary, external CSS file.
    This example is the <code>files</code> subdirectory under the current notebook; the file could be
    <code>whatever.css</code>, but we keep the <code>custom.css</code> name to be consistent with the required name for
    Jupyter (even though in a different location)</li>

    <li><code>--highlight-style=kate</code> is one of the language syntax highlighting options available in Pandoc;
    there are many others available and you may also create your own</li>

    <li><code>-o cwpk-15-using-notebooks-test.html</code> - is an optional output only if we want to change the base
    name from the input name; during drafting it is recommended to use another name (<code>-test</code>) to prevent
    inadvertent overwriting of good files.</li>
  </ul>

  <p>Upon executing this command, you will get a successful export, but a message indicating you did not provide a
  title for the project and it will default to the file name as shown by <span style="font-style: italic;">Figure
  1:</span></p>

  <div style="margin: 10px auto; display: table;"><img src="files/using-notebooks-1.png" title="Message at HTML Export"
  alt="Message at HTML Export" width="800" /></div>

  <div style="margin: 10px auto; display: table; font-style: italic;">
    Figure 1: Message at HTML Export
  </div>

  <p>There are metadata options you may assign at the command line, plus, of course, many other configuration options.
  Again, the best consolidated source for learning about these options is in the PDF <a href=
  "https://pandoc.org/MANUAL.pdf">Pandoc Users Guide</a>. This document is kept current with the many revisions that
  occur frequently for Pandoc.</p>

  <p>The next panel shows the HTML generated by this export. Note this document is much smaller (20x) than the version
  that comes from the download or <code>nbconvert</code> methods:</p>

  <div class="center-image">
    <iframe src="files/cwpk-15-using-notebooks-html.txt" allowfullscreen="" style=
    "border: 1px solid rgb(238, 238, 238);" height="450" width="800">Info here.</iframe>
  </div>

  <p>This HTML export is good for publication purposes, but lacks the interactivity of its interactive parent. You
  should thus refrain from such exports until development is largely complete. In any case, we see do static sections
  for the interactive portions of the notebook. These were styled according to <code>custom.css</code>.<br /></p>

  <p>Using similar commands you can also produce outputs in other formats, such as this one for the GitHub flavor of
  Markdown using this command line instruction:</p>
  <pre>
<code>$ pandoc -s -f ipynb -t gfm -c files/custom.css --highlight-style=kate cwpk-15-using-notebooks.ipynb</code>
</pre>

  <p>Note we have changed the <code>-t</code> to option to <code>gfm</code> and have removed the <code>-o</code> output
  option because we will use the same notebook file name. Here is the output from that conversion</p>

  <div class="center-image">
    <iframe src="files/cwpk-15-using-notebooks-md.txt" allowfullscreen="" style="border: 1px solid rgb(238, 238, 238);"
    height="450" width="800">Info here.</iframe>
  </div>

  <p>You can see that headers are more cleanly shown by <code>#</code> symbols, and that <code>gfm</code> is a
  generally clean design. It is becoming the <span style="font-style: italic;">de facto</span> standard for shared
  Markdown.</p>

  <p>Of course, no export is necessary for the actual notebook file since they are plain text. As noted in earlier
  installments, Jupyter Notebook files are natively expressed in JavaScript Object Notation (<a href=
  "https://en.wikipedia.org/wiki/JSON">JSON</a>). This is the only file representation that contains transferrable
  instructions for the interactive code cells in the notebook page. This JSON file is for the same content expressed in
  the files above:</p>

  <div class="center-image">
    <iframe src="files/cwpk-15-using-notebooks-ipynb.txt" allowfullscreen="" style=
    "border: 1px solid rgb(238, 238, 238);" height="450" width="800">Info here.</iframe>
  </div>

  <p>Mastery of these tools is a career in itself. I'm sure there are better ways to write these commands or even how
  to approach the workflow. As the examples presently stand there are a few minor glitches, for example, that keep this
  round-tripping from being completely automatic. Relative file locations get re-written with an
  '<code>attachment:</code>' prefix during the round-trip, which must be removed from the HTML code to get images to
  display. For some strange reason, images also need to have a width entry (<span style=
  "font-style: italic;">e.g.</span>, <code>width="800"</code>) in order not to be converted to Markdown format. Also,
  in some instances HTML code within a <code>div</code> gets converted to Markdown syntax, which then can not be
  recognized when later writing to HTML. The Pandoc system is full-featured and difficult to master without, I am sure,
  much use.</p>

  <p>In working with these tools, here is what I have discovered to be a good starting workflow:</p>

  <ol>
    <li>Author initial skeleton in HTML. Write intro, get references and links, set footer. Try to use familiar editing
    tools to apply desired formatting and styles</li>

    <li>Add blocks and major steps, including some thought for actual interactive pieces; name this working file with
    an <code>-edit</code> name extension to help prevent overwriting it</li>

    <li>Convert to Notebook format and transfer to notebook</li>

    <li>Work on interaction steps within Jupyter Notebook, one by one. Add narrative lead in and following commentary
    to each given step. If the narrative is too long or too involved to readily handle in the notebook with Markdown,
    save, revert to the HTML version for the interstitial narrative Markdown cell</li>

    <li>Generate Markdown for the connecting cell, copy back into the working notebook page</li>

    <li>Repeat as necessary to work through the interaction steps</li>

    <li>Save, and generate the new notebook</li>

    <li>Export to multiple publication platforms.</li>
  </ol>

  <p>These conversion efforts have also helped refine some of the directory refinements useful to this workflow. I
  first began laying out a broad directory structure for this project in CWPK #9. We can now add a major branch under
  our project for notebooks, with a major sub-branch being this one for the CWPK series. I personally use CamelCase for
  naming my upper directory levels, those I know will likely last for a year or more. Lower levels I have tended to
  lower case and hyphen separate more akin to a consistent treatment on Linux boxes.</p>

  <p>Here is how I am setting up my directory structure:</p>
  <pre>
<code>|-- PythonProject                                              # directory first introduced in CWPK #9 <br />     |-- Python                                               <br />           |-- [Anaconda3 distribution]                        <br />     |-- Notebooks                                             </code><code># see next directory expansion</code><code><br />          |-- </code><code>CWPKNotebook</code><code>                                    <br />     |-- TBA                                                  </code><code> # We'll add to this directory structure as we move on<br /></code><code> |-- TBA</code>
</pre>

  <p>Individual notebooks should live in their own directory along side any ancillary files related to them. For
  example:</p>
  <pre>
<code>Notebooks/<br />|-- CWPKNotebook<br />|    |-- cwpk-1-installment                                    </code><code># one folder/notebook per installment<br /></code><code>|        </code><code>|</code><code>-- .ipyn_checkpoints                                </code><code> </code><code># created automatically as notebooks are saved and checkpointed<br /></code><code>|            +-- </code><code>cwpk-1-installment.ipynb                     </code><code> </code><code># backup file from checkpoint, same name as current<br /></code><code>|        +-- </code><code>cwpk-1-installment.ipynb                         </code><code><code> </code><code># current active notebook file <br /></code><code>|        +-- </code><code>cwpk-1-installment-edit.html                     </code><code><code><code> </code><code># initial drafting file named differently to prevent overwriting <br /></code></code><code>|        +-- </code><code>cwpk-1-installment.html<br /></code><code>|        </code><code>|</code><code>-- </code><code>files                                            </code><code> </code><code># a sub-directory for all supporting files for that installment<br /></code><code>|            +-- </code><code><span style="color: rgb(204, 0, 0);">custom.css                                    </span></code><code># duplicated across installments, plus one in the Jupyter Notebook settings </code><code><span style="color: rgb(204, 0, 0);"><br /></span></code><code>|            +-- </code><code>image-1.png<br /></code><code>|            +-- </code><code>image-2.jpg</code><br /><code>|            +-- </code><code>attachment.txt</code><br /><code>|    </code><code>|</code><code>-- cwpk-2-installment<br /></code><code>|        </code><code>+</code><code>-- etc.<br /></code><code>|    </code><code>|</code><code>-- cwpk-3-etc.</code><br /></code></code>
</pre>

  <p>Note that Saving and xxx within Jupyter Notebook automatically creates a <code>.ipynb_checkpoints</code>
  subdirectory and populates it with the current version of the <code>*.ipynb</code> file. (So, don't mix up the
  current file in the parent directory with this backup one.) Further, is it perhaps better to create a more
  streamlined version of this directory structure that would place all notebook files (<code>*.ipynb</code>) in a
  single directory with a single location for the <code>custom.css</code>. That approach requires more logic in the
  application and is harder to include in a lesson. One advantage of the somewhat duplicative structure herein is that
  we are able to treat each notebook installment as a standalone unit.</p>

  <p>This installment completes our first major section on set-up and configuration of our working environment. In our
  next installment we switch gears to working with Python and lay out our game plan for doing so.</p>

  <div style=
  "border: 1px dotted rgb(247, 148, 29); margin: 15px 80px; padding: 8px; background-color: rgb(254, 238, 220); vertical-align: middle;">
  <strong>NOTE:</strong> This article is part of the <a href="/cooking-with-python-and-kbpedia/"><i>Cooking with Python
  and KBpedia</i></a> series. See the <a href="/cooking-with-python-and-kbpedia/">CWPK listing</a> for other articles
  in the series. <a href="http://kbpedia.org/">KBpedia</a> has its own Web site.
  </div>

  <div style=
  "border: 1px dotted rgb(206, 206, 255); margin: 15px 80px; padding: 8px; background-color: rgb(239, 239, 255); vertical-align: middle;">
  <strong>NOTE:</strong> This <a href="/cooking-with-python-and-kbpedia/">CWPK installment</a> is available as a
  Jupyter Notebook file. Please <a href="/cwpk13.ipynb/">download the file</a> and place it an appropriate location on
  your local hard drive. You may also <a href="/cwpk14.ipynb/"><strong>advance</strong></a> to the next lesson or
  <a href="/cwpk15.ipynb/"><strong>return</strong></a> to the prior lesson.
  </div>
</body>
</html>
